import os.path
import shutil
from pathlib import Path
import toml

sphinx_path = Path(__file__).parent.parent
project_path = sphinx_path.parent
src_path = project_path / "src"

source_folders = []

# Get the list of folders in source
if os.path.isdir(src_path):
    for folder in os.listdir(src_path):
        source_folders.append(src_path / folder)

# Clean old builded files
if os.path.isdir(sphinx_path / "build" / "doctrees"):
    shutil.rmtree(sphinx_path / "build" / "doctrees")
if os.path.isdir(sphinx_path / "build" / "html"):
    shutil.rmtree(sphinx_path / "build" / "html")
if os.path.isdir(sphinx_path / "source" / "autoapi"):
    shutil.rmtree(sphinx_path / "source" / "autoapi")

project = 'sphinx_autoindex'
copyright = '2025, Mickaël Descamps'
author = 'Mickaël Descamps'
release = '0.1.0'
version = '0.1.0'

pyproject_toml_file = project_path / "pyproject.toml"
if pyproject_toml_file.exists() and pyproject_toml_file.is_file():
    data = toml.load(pyproject_toml_file)

    project = 'sphinx-autoindex'
    copyright = '2025, Mickaël Descamps'
    author = 'Mickaël Descamps'
    release = '0.1.0'

    # Get project version, name, copyright and author
    if "project" in data:
        project_data = data["project"]
    elif "tool" in data and "poetry" in data["tool"]:
        project_data = data["tool"]["poetry"]
    else:
        project_data = None

    if project_data is not None:
        print(f"Keys : {project_data.keys()}")
        if "name" in project_data:
            project = project_data["name"]
        if "version" in project_data:
            version = project_data["version"]
        if "authors" in project_data:
            list_users = []
            for single_author in project_data["authors"]:
                if isinstance(single_author, str):
                    list_users.append(single_author)
                elif isinstance(single_author, dict):
                    if "name" in single_author and "email" in single_author:
                        list_users.append(f"{single_author['name']} - {single_author['email']}")

            author = ", ".join(list_users)

extensions = [
    'sphinx_autoindex',
    'sphinx_rtd_theme',
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx_copybutton',
    'sphinxemoji.sphinxemoji',
    'sphinx-prompt',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.graphviz',
    'sphinx.ext.todo'
]

package_toindex = str(Path(__file__).parent.parent.parent / "src" / "sphinx_autoindex")

templates_path = ['_templates']
exclude_patterns = []

# Template configuration
html_theme = 'sphinx_rtd_theme'
#html_static_path = ['_static']
#html_logo = '_static/logo2.png'
#html_favicon = '_static/logo1.png'
html_show_sphinx = False
html_theme_options = {
    'logo_only': True,
    'style_nav_header_background': '#e65e26',
    'version_selector': False
}

# Graphviz configurations
graphviz_output_format = 'svg'

# Suppress Warning generated by missing pydantic documentation
suppress_warnings = [""]


extension_list_str = ", ".join(extensions)

# Define rst_epilog to do substitutions
rst_epilog = """
.. |project_name| replace:: {project}
.. |version| replace:: {version}
.. |author| replace:: {author}
.. |extension_list| replace:: {extension_list}
""".format(project=project, version=version, author=author, extension_list=extension_list_str)

#def setup(app):
#    app.add_css_file('css/custom.css')