import os.path
import shutil
from pathlib import Path
import toml

sphinx_path = Path(__file__).parent.parent
project_path = sphinx_path.parent
src_path = project_path / "src"

source_folders = []

# Get the list of folders in source
if os.path.isdir(src_path):
    for folder in os.listdir(src_path):
        source_folders.append(src_path / folder)

# Clean old builded files
if os.path.isdir(sphinx_path / "build" / "doctrees"):
    shutil.rmtree(sphinx_path / "build" / "doctrees")
if os.path.isdir(sphinx_path / "build" / "html"):
    shutil.rmtree(sphinx_path / "build" / "html")
if os.path.isdir(sphinx_path / "source" / "autoapi"):
    shutil.rmtree(sphinx_path / "source" / "autoapi")

project = 'sphinx_autoindex'
copyright = '2025, Mickaël Descamps'
author = 'Mickaël Descamps'
release = '0.1.0'
version = '0.1.0'

extensions = [
    'sphinx_autoindex',
    'myst_parser',
    'sphinx_rtd_theme',
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx_copybutton',
    'sphinxemoji.sphinxemoji',
    'sphinx-prompt',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.graphviz',
    'sphinx.ext.todo'
]

source_suffix = {
    '.rst': 'restructuredtext',
    '.txt': 'restructuredtext',
    '.md': 'markdown',
}

package_toindex = str(Path(__file__).parent.parent.parent / "src" / "sphinx_autoindex")

templates_path = ['_templates']
exclude_patterns = []

# Template configuration
html_theme = 'sphinx_rtd_theme'
#html_static_path = ['_static']
#html_logo = '_static/logo2.png'
#html_favicon = '_static/logo1.png'
html_show_sphinx = False
html_theme_options = {
    'logo_only': True,
    'style_nav_header_background': '#e65e26',
    'version_selector': False
}

# Graphviz configurations
graphviz_output_format = 'svg'

# Suppress Warning generated by missing pydantic documentation
suppress_warnings = [""]


extension_list_str = ", ".join(extensions)

# Define rst_epilog to do substitutions
rst_epilog = """
.. |project_name| replace:: {project}
.. |version| replace:: {version}
.. |author| replace:: {author}
.. |extension_list| replace:: {extension_list}
""".format(project=project, version=version, author=author, extension_list=extension_list_str)

#def setup(app):
#    app.add_css_file('css/custom.css')